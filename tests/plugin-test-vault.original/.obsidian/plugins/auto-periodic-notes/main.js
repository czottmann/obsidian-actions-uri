/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the GitHub repository of this plugin.
*/

var Ce=Object.create;var B=Object.defineProperty;var We=Object.getOwnPropertyDescriptor;var Ye=Object.getOwnPropertyNames;var Re=Object.getPrototypeOf,Ue=Object.prototype.hasOwnProperty;var qe=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),He=(n,e)=>{for(var t in e)B(n,t,{get:e[t],enumerable:!0})},le=(n,e,t,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of Ye(e))!Ue.call(n,i)&&i!==t&&B(n,i,{get:()=>e[i],enumerable:!(o=We(e,i))||o.enumerable});return n};var x=(n,e,t)=>(t=n!=null?Ce(Re(n)):{},le(e||!n||!n.__esModule?B(t,"default",{value:n,enumerable:!0}):t,n)),$e=n=>le(B({},"__esModule",{value:!0}),n);var E=qe(r=>{"use strict";Object.defineProperty(r,"__esModule",{value:!0});var d=require("obsidian"),te="YYYY-MM-DD",ne="gggg-[W]ww",de="YYYY-MM",ue="YYYY-[Q]Q",pe="YYYY";function _(n){var t,o;let e=window.app.plugins.getPlugin("periodic-notes");return e&&((o=(t=e.settings)==null?void 0:t[n])==null?void 0:o.enabled)}function M(){var n,e,t,o;try{let{internalPlugins:i,plugins:a}=window.app;if(_("daily")){let{format:l,folder:m,template:f}=((e=(n=a.getPlugin("periodic-notes"))==null?void 0:n.settings)==null?void 0:e.daily)||{};return{format:l||te,folder:(m==null?void 0:m.trim())||"",template:(f==null?void 0:f.trim())||""}}let{folder:s,format:c,template:u}=((o=(t=i.getPluginById("daily-notes"))==null?void 0:t.instance)==null?void 0:o.options)||{};return{format:c||te,folder:(s==null?void 0:s.trim())||"",template:(u==null?void 0:u.trim())||""}}catch(i){console.info("No custom daily note settings found!",i)}}function L(){var n,e,t,o,i,a,s;try{let c=window.app.plugins,u=(n=c.getPlugin("calendar"))==null?void 0:n.options,l=(t=(e=c.getPlugin("periodic-notes"))==null?void 0:e.settings)==null?void 0:t.weekly;if(_("weekly"))return{format:l.format||ne,folder:((o=l.folder)==null?void 0:o.trim())||"",template:((i=l.template)==null?void 0:i.trim())||""};let m=u||{};return{format:m.weeklyNoteFormat||ne,folder:((a=m.weeklyNoteFolder)==null?void 0:a.trim())||"",template:((s=m.weeklyNoteTemplate)==null?void 0:s.trim())||""}}catch(c){console.info("No custom weekly note settings found!",c)}}function C(){var e,t,o,i;let n=window.app.plugins;try{let a=_("monthly")&&((t=(e=n.getPlugin("periodic-notes"))==null?void 0:e.settings)==null?void 0:t.monthly)||{};return{format:a.format||de,folder:((o=a.folder)==null?void 0:o.trim())||"",template:((i=a.template)==null?void 0:i.trim())||""}}catch(a){console.info("No custom monthly note settings found!",a)}}function W(){var e,t,o,i;let n=window.app.plugins;try{let a=_("quarterly")&&((t=(e=n.getPlugin("periodic-notes"))==null?void 0:e.settings)==null?void 0:t.quarterly)||{};return{format:a.format||ue,folder:((o=a.folder)==null?void 0:o.trim())||"",template:((i=a.template)==null?void 0:i.trim())||""}}catch(a){console.info("No custom quarterly note settings found!",a)}}function Y(){var e,t,o,i;let n=window.app.plugins;try{let a=_("yearly")&&((t=(e=n.getPlugin("periodic-notes"))==null?void 0:e.settings)==null?void 0:t.yearly)||{};return{format:a.format||pe,folder:((o=a.folder)==null?void 0:o.trim())||"",template:((i=a.template)==null?void 0:i.trim())||""}}catch(a){console.info("No custom yearly note settings found!",a)}}function ge(...n){let e=[];for(let o=0,i=n.length;o<i;o++)e=e.concat(n[o].split("/"));let t=[];for(let o=0,i=e.length;o<i;o++){let a=e[o];!a||a==="."||t.push(a)}return e[0]===""&&t.unshift(""),t.join("/")}function je(n){let e=n.substring(n.lastIndexOf("/")+1);return e.lastIndexOf(".")!=-1&&(e=e.substring(0,e.lastIndexOf("."))),e}async function Qe(n){let e=n.replace(/\\/g,"/").split("/");if(e.pop(),e.length){let t=ge(...e);window.app.vault.getAbstractFileByPath(t)||await window.app.vault.createFolder(t)}}async function R(n,e){e.endsWith(".md")||(e+=".md");let t=d.normalizePath(ge(n,e));return await Qe(t),t}async function A(n){let{metadataCache:e,vault:t}=window.app,o=d.normalizePath(n);if(o==="/")return Promise.resolve(["",null]);try{let i=e.getFirstLinkpathDest(o,""),a=await t.cachedRead(i),s=window.app.foldManager.load(i);return[a,s]}catch(i){return console.error(`Failed to read the daily note template '${o}'`,i),new d.Notice("Failed to read the daily note template"),["",null]}}function N(n,e="day"){let t=n.clone().startOf(e).format();return`${e}-${t}`}function me(n){return n.replace(/\[[^\]]*\]/g,"")}function ze(n,e){if(e==="week"){let t=me(n);return/w{1,2}/i.test(t)&&(/M{1,4}/.test(t)||/D{1,4}/.test(t))}return!1}function D(n,e){return fe(n.basename,e)}function Ve(n,e){return fe(je(n),e)}function fe(n,e){let o={day:M,week:L,month:C,quarter:W,year:Y}[e]().format.split("/").pop(),i=window.moment(n,o,!0);if(!i.isValid())return null;if(ze(o,e)&&e==="week"){let a=me(o);if(/w{1,2}/i.test(a))return window.moment(n,o.replace(/M{1,4}/g,"").replace(/D{1,4}/g,""),!1)}return i}var oe=class extends Error{};async function ye(n){let e=window.app,{vault:t}=e,o=window.moment,{template:i,format:a,folder:s}=M(),[c,u]=await A(i),l=n.format(a),m=await R(s,l);try{let f=await t.create(m,c.replace(/{{\s*date\s*}}/gi,l).replace(/{{\s*time\s*}}/gi,o().format("HH:mm")).replace(/{{\s*title\s*}}/gi,l).replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,(P,b,T,h,g,p)=>{let Z=o(),ee=n.clone().set({hour:Z.get("hour"),minute:Z.get("minute"),second:Z.get("second")});return T&&ee.add(parseInt(h,10),g),p?ee.format(p.substring(1).trim()):ee.format(a)}).replace(/{{\s*yesterday\s*}}/gi,n.clone().subtract(1,"day").format(a)).replace(/{{\s*tomorrow\s*}}/gi,n.clone().add(1,"d").format(a)));return e.foldManager.save(f,u),f}catch(f){console.error(`Failed to create file: '${m}'`,f),new d.Notice("Unable to create new file.")}}function Be(n,e){var t;return(t=e[N(n,"day")])!=null?t:null}function Ge(){let{vault:n}=window.app,{folder:e}=M(),t=n.getAbstractFileByPath(d.normalizePath(e));if(!t)throw new oe("Failed to find daily notes folder");let o={};return d.Vault.recurseChildren(t,i=>{if(i instanceof d.TFile){let a=D(i,"day");if(a){let s=N(a,"day");o[s]=i}}}),o}var ie=class extends Error{};function Je(){let{moment:n}=window,e=n.localeData()._week.dow,t=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"];for(;e;)t.push(t.shift()),e--;return t}function Ke(n){return Je().indexOf(n.toLowerCase())}async function he(n){let{vault:e}=window.app,{template:t,format:o,folder:i}=L(),[a,s]=await A(t),c=n.format(o),u=await R(i,c);try{let l=await e.create(u,a.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,(m,f,P,b,T,h)=>{let g=window.moment(),p=n.clone().set({hour:g.get("hour"),minute:g.get("minute"),second:g.get("second")});return P&&p.add(parseInt(b,10),T),h?p.format(h.substring(1).trim()):p.format(o)}).replace(/{{\s*title\s*}}/gi,c).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*(sunday|monday|tuesday|wednesday|thursday|friday|saturday)\s*:(.*?)}}/gi,(m,f,P)=>{let b=Ke(f);return n.weekday(b).format(P.trim())}));return window.app.foldManager.save(l,s),l}catch(l){console.error(`Failed to create file: '${u}'`,l),new d.Notice("Unable to create new file.")}}function Xe(n,e){var t;return(t=e[N(n,"week")])!=null?t:null}function Ze(){let n={};if(!Ne())return n;let{vault:e}=window.app,{folder:t}=L(),o=e.getAbstractFileByPath(d.normalizePath(t));if(!o)throw new ie("Failed to find weekly notes folder");return d.Vault.recurseChildren(o,i=>{if(i instanceof d.TFile){let a=D(i,"week");if(a){let s=N(a,"week");n[s]=i}}}),n}var ae=class extends Error{};async function we(n){let{vault:e}=window.app,{template:t,format:o,folder:i}=C(),[a,s]=await A(t),c=n.format(o),u=await R(i,c);try{let l=await e.create(u,a.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,(m,f,P,b,T,h)=>{let g=window.moment(),p=n.clone().set({hour:g.get("hour"),minute:g.get("minute"),second:g.get("second")});return P&&p.add(parseInt(b,10),T),h?p.format(h.substring(1).trim()):p.format(o)}).replace(/{{\s*date\s*}}/gi,c).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi,c));return window.app.foldManager.save(l,s),l}catch(l){console.error(`Failed to create file: '${u}'`,l),new d.Notice("Unable to create new file.")}}function et(n,e){var t;return(t=e[N(n,"month")])!=null?t:null}function tt(){let n={};if(!Pe())return n;let{vault:e}=window.app,{folder:t}=C(),o=e.getAbstractFileByPath(d.normalizePath(t));if(!o)throw new ae("Failed to find monthly notes folder");return d.Vault.recurseChildren(o,i=>{if(i instanceof d.TFile){let a=D(i,"month");if(a){let s=N(a,"month");n[s]=i}}}),n}var re=class extends Error{};async function nt(n){let{vault:e}=window.app,{template:t,format:o,folder:i}=W(),[a,s]=await A(t),c=n.format(o),u=await R(i,c);try{let l=await e.create(u,a.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,(m,f,P,b,T,h)=>{let g=window.moment(),p=n.clone().set({hour:g.get("hour"),minute:g.get("minute"),second:g.get("second")});return P&&p.add(parseInt(b,10),T),h?p.format(h.substring(1).trim()):p.format(o)}).replace(/{{\s*date\s*}}/gi,c).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi,c));return window.app.foldManager.save(l,s),l}catch(l){console.error(`Failed to create file: '${u}'`,l),new d.Notice("Unable to create new file.")}}function ot(n,e){var t;return(t=e[N(n,"quarter")])!=null?t:null}function it(){let n={};if(!be())return n;let{vault:e}=window.app,{folder:t}=W(),o=e.getAbstractFileByPath(d.normalizePath(t));if(!o)throw new re("Failed to find quarterly notes folder");return d.Vault.recurseChildren(o,i=>{if(i instanceof d.TFile){let a=D(i,"quarter");if(a){let s=N(a,"quarter");n[s]=i}}}),n}var se=class extends Error{};async function at(n){let{vault:e}=window.app,{template:t,format:o,folder:i}=Y(),[a,s]=await A(t),c=n.format(o),u=await R(i,c);try{let l=await e.create(u,a.replace(/{{\s*(date|time)\s*(([+-]\d+)([yqmwdhs]))?\s*(:.+?)?}}/gi,(m,f,P,b,T,h)=>{let g=window.moment(),p=n.clone().set({hour:g.get("hour"),minute:g.get("minute"),second:g.get("second")});return P&&p.add(parseInt(b,10),T),h?p.format(h.substring(1).trim()):p.format(o)}).replace(/{{\s*date\s*}}/gi,c).replace(/{{\s*time\s*}}/gi,window.moment().format("HH:mm")).replace(/{{\s*title\s*}}/gi,c));return window.app.foldManager.save(l,s),l}catch(l){console.error(`Failed to create file: '${u}'`,l),new d.Notice("Unable to create new file.")}}function rt(n,e){var t;return(t=e[N(n,"year")])!=null?t:null}function st(){let n={};if(!Te())return n;let{vault:e}=window.app,{folder:t}=Y(),o=e.getAbstractFileByPath(d.normalizePath(t));if(!o)throw new se("Failed to find yearly notes folder");return d.Vault.recurseChildren(o,i=>{if(i instanceof d.TFile){let a=D(i,"year");if(a){let s=N(a,"year");n[s]=i}}}),n}function lt(){var o,i;let{app:n}=window,e=n.internalPlugins.plugins["daily-notes"];if(e&&e.enabled)return!0;let t=n.plugins.getPlugin("periodic-notes");return t&&((i=(o=t.settings)==null?void 0:o.daily)==null?void 0:i.enabled)}function Ne(){var t,o;let{app:n}=window;if(n.plugins.getPlugin("calendar"))return!0;let e=n.plugins.getPlugin("periodic-notes");return e&&((o=(t=e.settings)==null?void 0:t.weekly)==null?void 0:o.enabled)}function Pe(){var t,o;let{app:n}=window,e=n.plugins.getPlugin("periodic-notes");return e&&((o=(t=e.settings)==null?void 0:t.monthly)==null?void 0:o.enabled)}function be(){var t,o;let{app:n}=window,e=n.plugins.getPlugin("periodic-notes");return e&&((o=(t=e.settings)==null?void 0:t.quarterly)==null?void 0:o.enabled)}function Te(){var t,o;let{app:n}=window,e=n.plugins.getPlugin("periodic-notes");return e&&((o=(t=e.settings)==null?void 0:t.yearly)==null?void 0:o.enabled)}function ct(n){let e={day:M,week:L,month:C,quarter:W,year:Y}[n];return e()}function dt(n,e){return{day:ye,month:we,week:he}[n](e)}r.DEFAULT_DAILY_NOTE_FORMAT=te;r.DEFAULT_MONTHLY_NOTE_FORMAT=de;r.DEFAULT_QUARTERLY_NOTE_FORMAT=ue;r.DEFAULT_WEEKLY_NOTE_FORMAT=ne;r.DEFAULT_YEARLY_NOTE_FORMAT=pe;r.appHasDailyNotesPluginLoaded=lt;r.appHasMonthlyNotesPluginLoaded=Pe;r.appHasQuarterlyNotesPluginLoaded=be;r.appHasWeeklyNotesPluginLoaded=Ne;r.appHasYearlyNotesPluginLoaded=Te;r.createDailyNote=ye;r.createMonthlyNote=we;r.createPeriodicNote=dt;r.createQuarterlyNote=nt;r.createWeeklyNote=he;r.createYearlyNote=at;r.getAllDailyNotes=Ge;r.getAllMonthlyNotes=tt;r.getAllQuarterlyNotes=it;r.getAllWeeklyNotes=Ze;r.getAllYearlyNotes=st;r.getDailyNote=Be;r.getDailyNoteSettings=M;r.getDateFromFile=D;r.getDateFromPath=Ve;r.getDateUID=N;r.getMonthlyNote=et;r.getMonthlyNoteSettings=C;r.getPeriodicNoteSettings=ct;r.getQuarterlyNote=ot;r.getQuarterlyNoteSettings=W;r.getTemplateInfo=A;r.getWeeklyNote=Xe;r.getWeeklyNoteSettings=L;r.getYearlyNote=rt;r.getYearlyNoteSettings=Y});var pt={};He(pt,{default:()=>K});module.exports=$e(pt);var X=require("obsidian");var ce="auto-periodic-notes:settings-updated";var G=require("obsidian");var Oe=require("obsidian"),S=x(E());var w=class{};var Se="day",U=class extends w{constructor(){super(...arguments);this.date=(0,Oe.moment)()}getAllPaths(){let t=(0,S.getAllDailyNotes)();return Object.entries(t).map(([o,i])=>i.path)}isPresent(){let t=this.date.clone().startOf(Se),o=(0,S.getAllDailyNotes)();return!!(0,S.getDailyNote)(t,o)}async create(){let t=this.date.clone().startOf(Se);return(0,S.createDailyNote)(t)}getCurrent(){return(0,S.getDailyNote)(this.date,(0,S.getAllDailyNotes)())}};var ke=require("obsidian"),O=x(E());var Fe="month",q=class extends w{constructor(){super(...arguments);this.date=(0,ke.moment)()}getAllPaths(){let t=(0,O.getAllMonthlyNotes)();return Object.entries(t).map(([o,i])=>i.path)}isPresent(){let t=this.date.clone().startOf(Fe),o=(0,O.getAllMonthlyNotes)();return!!(0,O.getMonthlyNote)(t,o)}async create(){let t=this.date.clone().startOf(Fe);return(0,O.createMonthlyNote)(t)}getCurrent(){return(0,O.getMonthlyNote)(this.date,(0,O.getAllMonthlyNotes)())}};var ve=require("obsidian"),F=x(E());var Ie="quarter",H=class extends w{constructor(){super(...arguments);this.date=(0,ve.moment)()}getAllPaths(){let t=(0,F.getAllQuarterlyNotes)();return Object.entries(t).map(([o,i])=>i.path)}isPresent(){let t=this.date.clone().startOf(Ie),o=(0,F.getAllQuarterlyNotes)();return!!(0,F.getQuarterlyNote)(t,o)}async create(){let t=this.date.clone().startOf(Ie);return(0,F.createQuarterlyNote)(t)}getCurrent(){return(0,F.getQuarterlyNote)(this.date,(0,F.getAllQuarterlyNotes)())}};var De=require("obsidian"),k=x(E());var Ae="week",$=class extends w{constructor(){super(...arguments);this.date=(0,De.moment)()}getAllPaths(){let t=(0,k.getAllWeeklyNotes)();return Object.entries(t).map(([o,i])=>i.path)}isPresent(){let t=this.date.clone().startOf(Ae),o=(0,k.getAllWeeklyNotes)();return!!(0,k.getWeeklyNote)(t,o)}async create(){let t=this.date.clone().startOf(Ae);return(0,k.createWeeklyNote)(t)}getCurrent(){return(0,k.getWeeklyNote)(this.date,(0,k.getAllWeeklyNotes)())}};var xe=require("obsidian"),I=x(E());var Ee="year",j=class extends w{constructor(){super(...arguments);this.date=(0,xe.moment)()}getAllPaths(){let t=(0,I.getAllYearlyNotes)();return Object.entries(t).map(([o,i])=>i.path)}isPresent(){let t=this.date.clone().startOf(Ee),o=(0,I.getAllYearlyNotes)();return!!(0,I.getYearlyNote)(t,o)}async create(){let t=this.date.clone().startOf(Ee);return(0,I.createYearlyNote)(t)}getCurrent(){return(0,I.getYearlyNote)(this.date,(0,I.getAllYearlyNotes)())}};function y(n){console.debug(`[APN] ${n}`)}var Q=class{constructor(e){this.workspace=e}async checkAndCreateNotes(e){y("Checking if any new notes need to be created"),this.workspaceLeaves={},await this.checkAndCreateSingleNote(e.yearly,new j,"yearly",e.alwaysOpen),await this.checkAndCreateSingleNote(e.quarterly,new H,"quarterly",e.alwaysOpen),await this.checkAndCreateSingleNote(e.monthly,new q,"monthly",e.alwaysOpen),await this.checkAndCreateSingleNote(e.weekly,new $,"weekly",e.alwaysOpen),await this.checkAndCreateSingleNote(e.daily,new U,"daily",e.alwaysOpen)}async checkAndCreateSingleNote(e,t,o,i){if(e.available&&e.enabled)if(y(`Checking if ${o} note needs to be created`),t.isPresent()){if(i){y(`Set to always open notes, getting current ${o} note and checking if it needs to be opened`);let a=t.getCurrent();await this.handleClose(e,t,a),await this.handleOpen(e,a)}}else{if(o==="daily"&&e.excludeWeekends){let s=(0,G.moment)();if(s.format("dd")==="Sa"||s.format("dd")==="Su"){y("Not creating new note as it is a weekend");return}}y(`Creating new ${o} note`);let a=await t.create();new G.Notice(`Today's ${o} note has been created.`,5e3),await this.handleClose(e,t,a),await this.handleOpen(e,a)}}getOpenWorkspaceLeaves(){return Object.keys(this.workspaceLeaves).length||this.workspace.iterateRootLeaves(e=>{e.view.getState()&&typeof e.view.getState().file!="undefined"&&(this.workspaceLeaves[e.view.getState().file]=e)}),this.workspaceLeaves}async handleClose(e,t,o){if(e.closeExisting){y("Checking for any existing notes to close");let i=t.getAllPaths(),a=[];if(Object.entries(this.getOpenWorkspaceLeaves()).forEach(([s,c])=>{i.indexOf(s)>-1&&a.push(c)}),Object.keys(this.getOpenWorkspaceLeaves()).indexOf(o.path)===-1){y("Found "+a.length+" tab(s) to close");for(let s of a)s.detach()}await Promise.all([setTimeout(()=>{},1e3)])}}async handleOpen(e,t){var o;e.openAndPin&&Object.keys(this.getOpenWorkspaceLeaves()).indexOf(t.path)===-1&&(y("Opening new note"),await this.workspace.getLeaf(!0).openFile(t),(o=this.workspace.getMostRecentLeaf())==null||o.setPinned(!0))}};var _e="periodic-notes",Me="periodic-notes:settings-updated",J=class{constructor(e){this.app=e}isEnabled(){return this.app.plugins.enabledPlugins.has(_e)}getPlugin(){return this.app.plugins.getPlugin(_e)}getSettings(){return this.getPlugin().settings||{}}convertSettings(e,t){return e.daily.available=t.daily.enabled,e.weekly.available=t.weekly.enabled,e.monthly.available=t.monthly.enabled,e.quarterly.available=t.quarterly.enabled,e.yearly.available=t.yearly.enabled,e}};var z=Object.freeze({available:!1,enabled:!1,closeExisting:!1,openAndPin:!1}),ut=Object.freeze({alwaysOpen:!1,daily:{...z,excludeWeekends:!1},weekly:{...z},monthly:{...z},quarterly:{...z},yearly:{...z}});function Le(n){return Object.assign({},ut,n)}var v=require("obsidian"),V=class extends v.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){this.containerEl.empty();let e=this.plugin.settings,t=["daily","weekly","monthly","quarterly","yearly"];if(!e.daily.available&&!e.weekly.available&&!e.monthly.available&&!e.quarterly.available&&!e.yearly.available){let o=this.containerEl.createDiv({cls:"settings-banner"});new v.Setting(o).setName("No periodic notes enabled").setHeading().setDesc("No periodic notes settings are enabled. You must turn on one of daily, weekly, monthly, quarterly or yearly notes within the Periodic Notes plugin settings to be able to configure them to generate automatically.")}this.containerEl.createEl("h3",{text:"All periodic notes"}),new v.Setting(this.containerEl).setName("Always open periodic notes").setDesc("When opening Obsidian or checking notes, always open your periodic notes even when they haven't just been created. This can be useful for maintaining a consistent workspace with pinned notes each time you start your day.").addToggle(o=>{o.setValue(e.alwaysOpen).onChange(async i=>{e.alwaysOpen=i,await this.plugin.updateSettings(e)})});for(let o of t)e[o].available&&(this.containerEl.createEl("h3",{text:`Automatic ${o} notes`}),new v.Setting(this.containerEl).setName(`Enable automatic ${o} notes`).setDesc(`Create new ${o} notes automatically using periodic notes location and template.`).addToggle(i=>{i.setValue(e[o].enabled).onChange(async a=>{e[o].enabled=a,await this.plugin.updateSettings(e)})}),o==="daily"&&new v.Setting(this.containerEl).setName("Exclude weekends").setDesc("Only create new daily notes Monday - Friday, excluding Saturdays and Sundays.").addToggle(i=>{i.setValue(e[o].excludeWeekends).onChange(async a=>{e[o].excludeWeekends=a,await this.plugin.updateSettings(e)})}),new v.Setting(this.containerEl).setName(`Open and pin new ${o} notes`).setDesc("When enabled, whether to automatically open the new note and pin it to your tabs.").addToggle(i=>{i.setValue(e[o].openAndPin).onChange(async a=>{e[o].openAndPin=a,await this.plugin.updateSettings(e)})}),new v.Setting(this.containerEl).setName(`Close older ${o} notes`).setDesc(`When creating new notes, automatically close any older and open ${o} notes.`).addToggle(i=>{i.setValue(e[o].closeExisting).onChange(async a=>{e[o].closeExisting=a,await this.plugin.updateSettings(e)})}))}};var K=class extends X.Plugin{constructor(e,t){super(e,t),this.settings={},this.periodicNotesPlugin=new J(e),this.notes=new Q(e.workspace)}async onload(){this.updateSettings=this.updateSettings.bind(this),await this.loadSettings(),this.app.workspace.onLayoutReady(this.onLayoutReady.bind(this))}onLayoutReady(){if(!this.periodicNotesPlugin.isEnabled()){new X.Notice("The Periodic Notes plugin must be installed and available for Auto Periodic Notes to work.",1e4);return}let e=this.app.workspace;this.registerEvent(e.on(Me,this.syncPeriodicNotesSettings.bind(this))),this.syncPeriodicNotesSettings(),this.addSettingTab(new V(this.app,this)),this.registerInterval(window.setInterval(()=>{this.notes.checkAndCreateNotes(this.settings)},3e5)),this.notes.checkAndCreateNotes(this.settings)}async loadSettings(){this.settings=Le(await this.loadData()),y("Loaded settings: "+JSON.stringify(this.settings))}async updateSettings(e){this.settings=e,await this.saveData(this.settings),this.onSettingsUpdate(),y("Saved settings: "+JSON.stringify(this.settings))}syncPeriodicNotesSettings(){y("Received new settings from Periodic Notes plugin"),this.updateSettings(this.periodicNotesPlugin.convertSettings(this.settings,this.periodicNotesPlugin.getSettings()))}onSettingsUpdate(){this.app.workspace.trigger(ce)}};

/* nosourcemap */