import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { exec } from "child_process";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const isProduction = process.argv[2] === "production";
const rsyncPlugin = {
  name: "rsyncPlugin",
  setup(build) {
    build.onEnd((result) => {
      if (process.env.USER !== "czottmann" || isProduction) {
        return;
      }

      exec(
        "../bin/sync-current-plugins-to-workbench-vault.fish",
        (error, stdout, stderr) => {
          if (error) {
            console.log(`exec error: ${error}`);
          }
          if (stderr) {
            console.log(stderr);
          } else
            console.log(
              "[watch] sync'd via `../bin/sync-current-plugins-to-workbench-vault.fish`"
            );
        }
      );
    });
  },
};

esbuild
  .build({
    banner: {
      js: banner,
    },
    bundle: true,
    entryPoints: ["src/main.ts"],
    external: [
      "obsidian",
      "electron",
      "@codemirror/autocomplete",
      "@codemirror/collab",
      "@codemirror/commands",
      "@codemirror/language",
      "@codemirror/lint",
      "@codemirror/search",
      "@codemirror/state",
      "@codemirror/view",
      "@lezer/common",
      "@lezer/highlight",
      "@lezer/lr",
      ...builtins,
    ],
    format: "cjs",
    logLevel: "info",
    minify: isProduction,
    outfile: "main.js",
    plugins: [rsyncPlugin],
    sourcemap: isProduction ? false : "inline",
    target: "es2022",
    treeShaking: true,
    watch: !isProduction,
  })
  .catch(() => process.exit(1));
